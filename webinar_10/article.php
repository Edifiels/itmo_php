<?php
// article.php - –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—å–∏ —Å SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞
require_once 'autoload.php';

use Blog\Controllers\ArticleController;
use Blog\Controllers\CommentController;
use Blog\Repositories\ArticleRepository;
use Blog\Repositories\CommentRepository;
use Blog\Repositories\UserRepository;
use Blog\Services\HelperService;
use Blog\Services\SecurityService;
use Blog\Services\SEOService;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Å—Å–∏–∏
SecurityService::initSecureSession();

try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    $pdo = getDatabaseConnection();
    if (!$pdo) {
        throw new Exception("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç—å–∏
    $articleId = isset($_GET['id']) ? (int)$_GET['id'] : 0;
    
    if ($articleId <= 0) {
        header('Location: index.php');
        exit;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    $articleRepository = new ArticleRepository($pdo);
    $commentRepository = new CommentRepository($pdo);
    $userRepository = new UserRepository($pdo);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    $articleController = new ArticleController($articleRepository, $commentRepository, $userRepository);
    $commentController = new CommentController($commentRepository, $pdo);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    $data = $articleController->show($articleId);
    
    if (!$data) {
        header("HTTP/1.0 404 Not Found");
        echo "<!DOCTYPE html><html><head><title>–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title></head><body>";
        echo "<div style='text-align: center; padding: 3rem;'>";
        echo "<h1>üìÑ –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>";
        echo "<p>–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ç—å—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –≤—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Å—ã–ª–∫–µ.</p>";
        echo "<a href='index.php' style='display: inline-block; background: #667eea; color: white; padding: 1rem 2rem; text-decoration: none; border-radius: 6px; margin-top: 1rem;'>‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ç—å—è–º</a>";
        echo "</div>";
        echo "</body></html>";
        exit;
    }
    
    $article = $data['article'];
    $comments = $data['comments'];
    $similarArticles = $data['similarArticles'];
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è honeypot –ø–æ–ª—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º-–±–æ—Ç–æ–≤
    $honeypot = SecurityService::generateHoneypot();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    $commentMessage = '';
    $commentError = '';
    
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add_comment'])) {
        $authorName = HelperService::sanitizeString($_POST['author_name'] ?? '');
        $authorEmail = trim($_POST['author_email'] ?? '');
        $commentContent = HelperService::sanitizeString($_POST['comment_content'] ?? '');
        $csrfToken = $_POST['csrf_token'] ?? '';
        
        $result = $commentController->add(
            $articleId, 
            $authorName, 
            $authorEmail, 
            $commentContent, 
            $csrfToken,
            $honeypot
        );
        
        if ($result['success']) {
            $commentMessage = $result['message'];
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            $_POST = [];
        } else {
            $commentError = $result['message'];
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    $comments = $commentRepository->findByArticle($articleId);
    $commentsCount = count($comments);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SEO –¥–∞–Ω–Ω—ã–µ
    $seoTitle = $article->getTitle() . ' | IT Blog';
    $seoDescription = $article->getExcerpt();
    $seoKeywords = implode(', ', $article->getTags());
    $currentUrl = 'http' . (isset($_SERVER['HTTPS']) ? 's' : '') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
    
    // –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    $breadcrumbs = [
        ['name' => '–ì–ª–∞–≤–Ω–∞—è', 'url' => '/'],
        ['name' => $article->getCategory(), 'url' => '/search.php?q=' . urlencode($article->getCategory())],
        ['name' => $article->getTitle(), 'url' => '']
    ];
    
} catch (Exception $e) {
    echo "<!DOCTYPE html><html><head><title>–û—à–∏–±–∫–∞</title></head><body>";
    echo "<h1>‚ùå –û—à–∏–±–∫–∞: " . htmlspecialchars($e->getMessage()) . "</h1>";
    echo "<p><a href='index.php'>‚Üê –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–π</a></p>";
    echo "</body></html>";
    exit;
}
?>

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo htmlspecialchars($seoTitle) ?></title>
    
    <!-- SEO –º–µ—Ç–∞-—Ç–µ–≥–∏ -->
    <?php echo SEOService::generateMetaTags($seoTitle, $seoDescription, $seoKeywords, '', $currentUrl) ?>
    
    <!-- –°—Ç–∏–ª–∏ -->
    <link rel="stylesheet" href="style.css">
    
    <!-- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—å–∏ -->
    <?php echo SEOService::generateArticleSchema($article, $article->getAuthor(), $comments) ?>
    
    <!-- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ -->
    <?php echo SEOService::generateBreadcrumbSchema($breadcrumbs) ?>
    
    <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ SEO —Ç–µ–≥–∏ -->
    <link rel="prev" href="/" title="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞">
    <meta name="article:author" content="<?php echo htmlspecialchars($article->getAuthor()['name']) ?>">
    <meta name="article:published_time" content="<?php echo date('c', strtotime($article->getCreatedAt())) ?>">
    <meta name="article:modified_time" content="<?php echo date('c', strtotime($article->getUpdatedAt() ?: $article->getCreatedAt())) ?>">
    <meta name="article:section" content="<?php echo htmlspecialchars($article->getCategory()) ?>">
    <?php foreach ($article->getTags() as $tag): ?>
    <meta name="article:tag" content="<?php echo htmlspecialchars($tag) ?>">
    <?php endforeach; ?>
</head>
<body>
    <div class="container">
        <!-- –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ -->
        <nav class="breadcrumbs-wrapper" aria-label="breadcrumb">
            <?php echo SEOService::generateBreadcrumbs($breadcrumbs) ?>
        </nav>
        
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ -->
        <header class="article-header" itemscope itemtype="https://schema.org/Article">
            <h1 class="article-title" itemprop="headline"><?php echo htmlspecialchars($article->getTitle()) ?></h1>
            <p class="article-excerpt" itemprop="description"><?php echo htmlspecialchars($article->getExcerpt()) ?></p>
            
            <div class="article-info">
                <div class="info-item" itemprop="author" itemscope itemtype="https://schema.org/Person">
                    <strong>–ê–≤—Ç–æ—Ä:</strong> <span itemprop="name"><?php echo htmlspecialchars($article->getAuthor()['name']) ?></span>
                </div>
                <div class="info-item" itemprop="articleSection">
                    <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> <?php echo htmlspecialchars($article->getCategory()) ?>
                </div>
                <div class="info-item">
                    <strong>–î–∞—Ç–∞:</strong> 
                    <time datetime="<?php echo date('c', strtotime($article->getDate())) ?>" itemprop="datePublished">
                        <?php echo HelperService::formatDate($article->getDate()) ?>
                    </time>
                </div>
                <div class="info-item">
                    <strong>–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è:</strong> 
                    <span itemprop="timeRequired" content="PT<?php echo $article->getReadingTime() ?>M">
                        <?php echo $article->getReadingTime() ?> –º–∏–Ω
                    </span>
                </div>
            </div>
            
            <div class="article-tags" itemprop="keywords">
                <?php echo HelperService::renderTags($article->getTags()) ?>
            </div>
        </header>
        
        <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ -->
        <main class="article-content">
            <div class="article-text" itemprop="articleBody">
                <?php echo nl2br(htmlspecialchars($article->getContent())) ?>
            </div>
        </main>
        
        <!-- –ê–≤—Ç–æ—Ä -->
        <section class="author-info" itemscope itemtype="https://schema.org/Person">
            <h2>–û–± –∞–≤—Ç–æ—Ä–µ</h2>
            <div class="author-card">
                <div class="author-avatar">
                    <?php echo strtoupper(substr($article->getAuthor()['name'], 0, 1)) ?>
                </div>
                <div class="author-details">
                    <h3 itemprop="name"><?php echo htmlspecialchars($article->getAuthor()['name']) ?></h3>
                    <p itemprop="email"><?php echo htmlspecialchars($article->getAuthor()['email']) ?></p>
                    <?php if (!empty($article->getAuthor()['bio'])): ?>
                    <p class="author-bio" itemprop="description"><?php echo htmlspecialchars($article->getAuthor()['bio']) ?></p>
                    <?php endif; ?>
                </div>
            </div>
        </section>
        
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ -->
        <section class="article-stats-section">
            <p>üëÅÔ∏è –≠—Ç—É —Å—Ç–∞—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ <strong><?php echo HelperService::formatViews($article->getViews()) ?></strong> —Ä–∞–∑</p>
        </section>
        
        <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -->
        <section class="comments-section" id="comments">
            <h2>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (<?php echo $commentsCount ?>)</h2>
            
            <?php if ($commentMessage): ?>
            <div class="message" role="alert">‚úÖ <?php echo htmlspecialchars($commentMessage) ?></div>
            <?php endif; ?>
            
            <?php if ($commentError): ?>
            <div class="error" role="alert">‚ùå <?php echo htmlspecialchars($commentError) ?></div>
            <?php endif; ?>
            
            <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è -->
            <div class="comment-form">
                <h3>–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</h3>
                <form method="POST" id="commentForm" novalidate>
                    <!-- CSRF –∑–∞—â–∏—Ç–∞ -->
                    <input type="hidden" name="csrf_token" value="<?php echo SecurityService::generateCSRFToken() ?>">
                    
                    <!-- Honeypot –ø–æ–ª–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º-–±–æ—Ç–æ–≤ -->
                    <?php echo $honeypot['html'] ?>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="author_name">–í–∞—à–µ –∏–º—è *</label>
                            <input type="text" name="author_name" id="author_name" required maxlength="100"
                                   value="<?php echo htmlspecialchars($_POST['author_name'] ?? '') ?>"
                                   placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                                   aria-describedby="name-help">
                            <small id="name-help">–¢–æ–ª—å–∫–æ –≤–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="author_email">Email *</label>
                            <input type="email" name="author_email" id="author_email" required maxlength="150"
                                   value="<?php echo htmlspecialchars($_POST['author_email'] ?? '') ?>"
                                   placeholder="–≤–∞—à@email.com"
                                   aria-describedby="email-help">
                            <small id="email-help">Email –Ω–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</small>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="comment_content">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π *</label>
                        <textarea name="comment_content" id="comment_content" required 
                                  rows="4" minlength="10" maxlength="1000"
                                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                                  aria-describedby="content-help"><?php echo htmlspecialchars($_POST['comment_content'] ?? '') ?></textarea>
                        <small id="content-help">–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 1000</small>
                    </div>
                    
                    <div class="form-group comment-guidelines">
                        <h4>üìã –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h4>
                        <ul>
                            <li>–ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã</li>
                            <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —Å–ø–∞–º</li>
                            <li>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é</li>
                            <li>HTML —Ç–µ–≥–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è</li>
                        </ul>
                    </div>
                    
                    <button type="submit" name="add_comment" class="btn btn-primary" id="submit-comment">
                        üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    </button>
                </form>
            </div>
            
            <!-- –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ -->
            <?php if (!empty($comments)): ?>
            <div class="comments-list">
                <h3>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–∏—Ç–∞—Ç–µ–ª–µ–π:</h3>
                <?php foreach ($comments as $comment): ?>
                <article class="comment-item" itemscope itemtype="https://schema.org/Comment">
                    <header class="comment-header">
                        <div class="comment-author">
                            <div class="comment-avatar">
                                <?php echo strtoupper(substr($comment->getAuthorName(), 0, 1)) ?>
                            </div>
                            <div class="comment-author-info">
                                <span class="comment-author-name" itemprop="author" itemscope itemtype="https://schema.org/Person">
                                    <span itemprop="name"><?php echo htmlspecialchars($comment->getAuthorName()) ?></span>
                                </span>
                                <time class="comment-date" datetime="<?php echo date('c', strtotime($comment->getCreatedAt())) ?>" itemprop="dateCreated">
                                    <?php echo HelperService::formatDateTime($comment->getCreatedAt()) ?>
                                </time>
                            </div>
                        </div>
                    </header>
                    <div class="comment-content" itemprop="text">
                        <?php echo nl2br(htmlspecialchars($comment->getContent())) ?>
                    </div>
                </article>
                <?php endforeach; ?>
            </div>
            <?php else: ?>
            <div class="no-comments">
                <p>–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</p>
            </div>
            <?php endif; ?>
        </section>
        
        <!-- –ü–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ -->
        <?php if (!empty($similarArticles)): ?>
        <section class="similar-articles">
            <h2>üìñ –ü–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏</h2>
            <div class="similar-grid">
                <?php foreach ($similarArticles as $similar): ?>
                <article class="similar-card" itemscope itemtype="https://schema.org/Article">
                    <h3 itemprop="headline">
                        <a href="article.php?id=<?php echo $similar['id'] ?>" itemprop="url">
                            <?php echo htmlspecialchars($similar['title']) ?>
                        </a>
                    </h3>
                    <p class="similar-meta">
                        <span itemprop="author" itemscope itemtype="https://schema.org/Person">
                            üë§ <span itemprop="name"><?php echo htmlspecialchars($similar['author_name']) ?></span>
                        </span> ‚Ä¢
                        üëÅÔ∏è <?php echo HelperService::formatViews($similar['views']) ?> ‚Ä¢ 
                        ‚è±Ô∏è <span itemprop="timeRequired" content="PT<?php echo $similar['reading_time'] ?>M"><?php echo $similar['reading_time'] ?> –º–∏–Ω</span>
                    </p>
                </article>
                <?php endforeach; ?>
            </div>
        </section>
        <?php endif; ?>
        
        <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
        <section class="action-section">
            <h2>üéØ –ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç—å—è?</h2>
            <p>–ß–∏—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–µ–π –≤ –Ω–∞—à–µ–º –±–ª–æ–≥–µ!</p>
            <nav class="action-buttons" aria-label="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–∞–π—Ç—É">
                <a href="index.php" class="btn btn-primary">üìö –í—Å–µ —Å—Ç–∞—Ç—å–∏</a>
                <a href="search.php" class="btn btn-secondary">üîç –ü–æ–∏—Å–∫</a>
                <a href="admin/index.php" class="btn btn-success">‚úèÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>
            </nav>
        </section>
    </div>

    <script>
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞
        document.getElementById('commentForm').addEventListener('submit', function(e) {
            const nameField = document.getElementById('author_name');
            const emailField = document.getElementById('author_email');
            const contentField = document.getElementById('comment_content');
            const submitBtn = document.getElementById('submit-comment');
            
            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            if (nameField.value.trim().length < 2) {
                alert('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
                nameField.focus();
                e.preventDefault();
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏
            if (/[<>\"']/.test(nameField.value)) {
                alert('–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã');
                nameField.focus();
                e.preventDefault();
                return false;
            }
            
            if (!emailField.value.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
                emailField.focus();
                e.preventDefault();
                return false;
            }
            
            if (contentField.value.trim().length < 10) {
                alert('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
                contentField.focus();
                e.preventDefault();
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (–ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
            const uppercaseRatio = (contentField.value.length - contentField.value.toLowerCase().length) / contentField.value.length;
            if (uppercaseRatio > 0.6) {
                alert('–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
                contentField.focus();
                e.preventDefault();
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
            const linkCount = (contentField.value.match(/http/gi) || []).length;
            if (linkCount > 2) {
                alert('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
                contentField.focus();
                e.preventDefault();
                return false;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
            submitBtn.disabled = true;
            
            // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }, 15000);
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            const messages = document.querySelectorAll('.message, .error');
            messages.forEach(msg => {
                msg.style.opacity = '0.8';
                setTimeout(() => {
                    msg.style.display = 'none';
                }, 3000);
            });
        }, 5000);
        
        // –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ textarea —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
        const textarea = document.getElementById('comment_content');
        const small = textarea.nextElementSibling;
        
        textarea.addEventListener('input', function() {
            const length = this.value.length;
            const remaining = 1000 - length;
            
            if (remaining < 100) {
                small.style.color = remaining < 0 ? '#e53e3e' : '#f56565';
                small.textContent = `–û—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–≤–æ–ª–æ–≤: ${remaining}`;
            } else if (length < 10) {
                small.style.color = '#f56565';
                small.textContent = `–ù—É–∂–Ω–æ –µ—â–µ ${10 - length} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 10)`;
            } else {
                small.style.color = '#718096';
                small.textContent = '–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 1000';
            }
        });
        
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –ø–æ —Ö–µ—à—Ç–µ–≥—É
        if (window.location.hash === '#comments') {
            document.querySelector('.comments-section').scrollIntoView({
                behavior: 'smooth'
            });
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        document.addEventListener('DOMContentLoaded', function() {
            // –û–±—ä—è–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è screen readers
            const commentsCount = <?php echo $commentsCount ?>;
            if (commentsCount > 0) {
                const announcement = document.createElement('div');
                announcement.setAttribute('aria-live', 'polite');
                announcement.setAttribute('aria-atomic', 'true');
                announcement.className = 'visually-hidden';
                announcement.textContent = `–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${commentsCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`;
                document.body.appendChild(announcement);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º ARIA –º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            const commentForm = document.getElementById('commentForm');
            commentForm.setAttribute('aria-label', '–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
            
            // –£–ª—É—á—à–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            const inputs = commentForm.querySelectorAll('input, textarea');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    this.setAttribute('aria-invalid', !this.checkValidity());
                });
            });
        });
    </script>
</body>
</html>